package org.ship.shipservice;

import java.math.BigInteger;

public class Test {
public static void main(String[] args) {
//	BigInteger v = new BigInteger("2");
//	int count =0;
//	for(long i = 1; i < 9223372036854775807l; i++ ) {  
//        long factors = 0;  
//        for(long j = 1; j < (i + 2)/2; j++ ) {  
//            // 将 i 依次除以 1 到 [(i + 2)/2]  
//            // 计算其整除的次数  
//            if((i % j) == 0) factors++;               
//        }  
//        // 如果只有一次整除，那么该数为素数  
//        if(factors < 2){
//            System.out.println(new BigInteger(""+i)+ " is prime");
//            v=v.multiply(new BigInteger(""+i));
//            System.out.println("素数连城:"+v.toString());
//            System.out.println("long素数个数:"+(count++));
//        }
//    }  
	
	BigInteger b = new BigInteger("348460039587979689074206602951486108996834760651868030010482610623579390409902935824308086174175258335483456571241363044396922990924202624552342307340078609759437840281380882430394787009456465614806610550784978909638097354636242367403436196052847183775311055585789104928515836760604531274349134173498103462788933106883374074739497608638720956372502741874580392591646473386438565626026981143311675705749269532968256210220514523186328775840608022652393942973544413918389612907874390721455558375461831978669752460266740448823175191834494381318351022254997498831774310990947507034485608540735639291433377210980583571047300922225541734106898224838177196786244922650289471557225375811726565985797520273864265825206071146205781769018288938212041074924291445642817667153859578707515236673694066625847602808655122591974970720271186314887856498787568966870178652506700894541786087537311187514057410711982137866026041362065305953423730408546431199562127112213940415043794476848047885161170738458971765913910046550872564984619272188386992505626738878345403069308406626204671988093679707139639979562453345884635503824922239988342469017662659863450309861298062950749041086657198773743668986752283367404736378538691820565373283567795858859076396242338947310550512161029653563171364860043598976476090458869551050532377990772208608405696246524716217994293553781437932109792901680394096970091435955240504158280564575626208857597746115535093863488017481673113635517385069135694288151082961160338667077317806319767799607404241724152253192219666028807700959923073162223590491986431624778392762392110391670359088736671446674001523219219927669107336987519297676978403995064707054044900786774600758893109994879852339536294931711700107908098071447058525621230757848559430776687344725528200366888354459380065075366013496366780972924913117515935009323666042461247077101997365459072724834783979572343863714012444027428532485452673068621651352835376518679168048518835167873857831499016679659351636609413797380592081433317795624034075768804769705912033280416423354901040118947559792362460173018725627296425925574047050277398025324093665186571433393670223127511107650785621945533978102874915774063229755527812404934367152674785888965917560373924813276767736216546176392347525279542233576529956187749105393550897136461363570082851961927768068970265948466985407803711238676465777007554472544284418340529011683504743582335502837452975528788625070533300569743499078017291725761982864750762595013856663469885700002646645498819780289843882282134525178720775279931181431098552386516497267715498263187806831606593972488456549883203520608284192549683897687609400223683574734614022604038238879127609417066132474476708721918457636698757560470314124211817240257244691580");
	System.out.println(b.toString());
}
}
